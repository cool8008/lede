name: LEDE-Kwrt Firmware Build

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build_lede_with_kwrt:
    name: Build LEDE Firmware with Kwrt Sources
    runs-on: ubuntu-22.04

    steps:
      - name: Cleanup and Initialize Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Clone LEDE Repository
        run: |
          rm -rf lede
          git clone https://github.com/cool8008/lede.git
          cd lede

      - name: Checkout LEDE
        uses: actions/checkout@v4
        with:
          path: lede

      - name: Print Working Directory
        run: |
          cd lede
          pwd

      - name: Install Required Perl Modules
        run: |
          cd lede
          sudo apt-get update
          sudo apt-get install -y libxml-parser-perl libarchive-zip-perl libdata-dump-perl liburi-perl libwww-perl

      - name: Add Kwrt Feed
        run: |
          cd lede
          echo "src-git kiddin9_kwrt https://github.com/cool8008/Kwrt.git" >> feeds.conf.default

      - name: Check Feeds Directory Permissions
        run: |
          cd lede
          mkdir -p feeds
          sudo chmod -R 777 feeds

      - name: Manually Clone Kwrt Feed
        run: |
          cd lede
          if [ ! -d "feeds/kiddin9_kwrt" ]; then
            git clone --depth=1 https://github.com/cool8008/Kwrt.git feeds/kiddin9_kwrt
          fi

      - name: Update Feeds
        run: |
          cd lede
          if [ ! -f "./scripts/feeds" ]; then
            echo "Error: ./scripts/feeds file not found."
            exit 1
          fi
          chmod +x ./scripts/feeds
          PERL5LIB="$PWD/scripts:$PERL5LIB" ./scripts/feeds update -a
          PERL5LIB="$PWD/scripts:$PERL5LIB" ./scripts/feeds install -a

      - name: Apply Common Configurations
        run: |
          cd lede
          shopt -s extglob
          sed -i '$a src-git kiddin9 https://github.com/kiddin9/kwrt-packages.git;main' feeds.conf.default
          sed -i "/telephony/d" feeds.conf.default
          sed -i "s?targets/%S/packages?targets/%S/\$(LINUX_VERSION)?" include/feeds.mk
          sed -i '/	refresh_config();/d' scripts/feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a -p kiddin9 -f
          ./scripts/feeds install -a
          sed --follow-symlinks -i "s#%C\"#%C by Kiddin'\"#" package/base-files/files/etc/os-release
          sed -i -e '$a /etc/bench.log' \
                  -e '/\/etc\/profile/d' \
                  -e '/\/etc\/shinit/d' \
                  package/base-files/files/lib/upgrade/keep.d/base-files-essential
          sed -i -e '/^\/etc\/profile/d' \
                  -e '/^\/etc\/shinit/d' \
                  package/base-files/Makefile
          sed -i "s/192.168.1/10.0.0/" package/base-files/files/bin/config_generate
          wget -N https://github.com/immortalwrt/immortalwrt/raw/refs/heads/openwrt-24.10/package/kernel/linux/modules/video.mk -P package/kernel/linux/modules/
          wget -N https://github.com/immortalwrt/immortalwrt/raw/refs/heads/openwrt-24.10/package/network/utils/nftables/patches/002-nftables-add-fullcone-expression-support.patch -P package/network/utils/nftables/patches/
          wget -N https://github.com/immortalwrt/immortalwrt/raw/refs/heads/openwrt-24.10/package/network/utils/nftables/patches/001-drop-useless-file.patch -P package/network/utils/nftables/patches/
          wget -N https://github.com/immortalwrt/immortalwrt/raw/refs/heads/openwrt-24.10/package/libs/libnftnl/patches/001-libnftnl-add-fullcone-expression-support.patch -P package/libs/libnftnl/patches/
          wget -N https://github.com/immortalwrt/immortalwrt/raw/refs/heads/openwrt-24.10/package/firmware/wireless-regdb/patches/600-custom-change-txpower-and-dfs.patch -P package/firmware/wireless-regdb/patches/
          wget -N https://github.com/immortalwrt/immortalwrt/raw/refs/heads/master/config/Config-kernel.in -P config/
          rm -rf package/libs/openssl package/network/services/ppp
          # 修改后的 git clone 命令
          git clone -b openwrt-24.10 https://github.com/immortalwrt/immortalwrt/package/libs/openssl package/libs/openssl
          git clone -b openwrt-24.10 https://github.com/immortalwrt/immortalwrt/package/network/services/ppp package/network/services/ppp
          echo "$(date +"%s")" >version.date
          sed -i '/$(curdir)\/compile:/c\$(curdir)/compile: package/opkg/host/compile' package/Makefile
          sed -i "s/DEFAULT_PACKAGES:=/DEFAULT_PACKAGES:=luci-app-advancedplus luci-app-firewall luci-app-package-manager luci-app-upnp luci-app-syscontrol luci-proto-wireguard \
          luci-app-wizard luci-base luci-compat luci-lib-ipkg luci-lib-fs \
          coremark wget-ssl curl autocore htop nano zram-swap kmod-lib-zstd kmod-tcp-bbr bash openssh-sftp-server block-mount resolveip ds-lite swconfig luci-app-fan luci-app-filemanager /" include/target.mk
          sed -i "s/procd-ujail//" include/target.mk
          sed -i "s/^.*vermagic$/\techo '1' > \$(LINUX_DIR)\/.vermagic/" include/kernel-defaults.mk
          mv -f feeds/kiddin9/r81* tmp/
          wget -N https://raw.githubusercontent.com/openwrt/packages/master/lang/golang/golang/Makefile -P feeds/packages/lang/golang/golang/
          sed -i 's/max_requests 3/max_requests 20/g' package/network/services/uhttpd/files/uhttpd.config
          sed -i "s/tty\(0\|1\)::askfirst/tty\1::respawn/g" target/linux/*/base-files/etc/inittab
          date=$(date +%m.%d.%Y)
          sed -i -e "/\(# \)\?REVISION:=/c\REVISION:=$date" -e '/VERSION_CODE:=/c\VERSION_CODE:=$(REVISION)' include/version.mk
          sed -i 's/option timeout 30/option timeout 60/g' package/system/rpcd/files/rpcd.config
          sed -i 's#20) \* 1000#60) \* 1000#g' feeds/luci/modules/luci-base/htdocs/luci-static/resources/rpc.js
          sed -i \
              -e "s/+\(luci\|luci-ssl\|uhttpd\)\( \|$\)/\2/" \
              -e "s/+nginx\( \|$\)/+nginx-ssl\1/" \
              -e 's/+python\( \|$\)/+python3/' \
              -e 's?../../lang?$(TOPDIR)/feeds/packages/lang?' \
              package/feeds/kiddin9/*/Makefile
          sed -i "s/OpenWrt/Kwrt/g" package/base-files/files/bin/config_generate package/base-files/image-config.in package/network/config/wifi-scripts/files/lib/wifi/mac80211.uc config/Config-images.in Config.in include/u-boot.mk include/version.mk || true

      - name: Generate Configuration File
        run: |
          cd lede
          make defconfig

      - name: Download Packages
        run: |
          cd lede
          make download -j16

      - name: Compile Firmware
        run: |
          cd lede
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare Artifacts
        run: |
          cd lede
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Upload Buildinfo
        uses: actions/upload-artifact@v4
        with:
          name: LEDE-Kwrt_buildinfo
          path: lede/artifact/buildinfo/

      - name: Upload Package
        uses: actions/upload-artifact@v4
        with:
          name: LEDE-Kwrt_package
          path: lede/artifact/package/

      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: LEDE-Kwrt_firmware
          path: lede/bin/targets/    
