name: LEDE-Kwrt Firmware Build

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_lede_with_kwrt:
    name: Build LEDE Firmware with Kwrt Sources
    runs-on: ubuntu-22.04
    env:
      REPO_URL: https://github.com/cool8008/lede.git
      KWRT_REPO_URL: https://github.com/cool8008/Kwrt.git
      IMMORTALWRT_REPO_URL: https://github.com/immortalwrt/immortalwrt
      IMMORTALWRT_BRANCH: openwrt-24.10

    steps:
      - name: Cleanup and Initialize Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Clone LEDE Repository
        run: |
          rm -rf lede
          git clone $REPO_URL
          cd lede

      - name: Checkout LEDE
        uses: actions/checkout@v4
        with:
          path: lede

      - name: Print Working Directory
        run: |
          cd lede
          pwd

      - name: Install Required Perl Modules
        run: |
          cd lede
          sudo apt-get update
          sudo apt-get install -y libxml-parser-perl libarchive-zip-perl libdata-dump-perl liburi-perl libwww-perl

      - name: Add Kwrt Feed
        run: |
          cd lede
          echo "src-git kiddin9_kwrt $KWRT_REPO_URL" >> feeds.conf.default

      - name: Check Feeds Directory Permissions
        run: |
          cd lede
          mkdir -p feeds
          sudo chmod -R 777 feeds

      - name: Manually Clone Kwrt Feed
        run: |
          cd lede
          if [ ! -d "feeds/kiddin9_kwrt" ]; then
            git clone --depth=1 $KWRT_REPO_URL feeds/kiddin9_kwrt
          fi

      - name: Update Feeds
        run: |
          cd lede
          if [ ! -f "./scripts/feeds" ]; then
            echo "Error: ./scripts/feeds file not found."
            exit 1
          fi
          chmod +x ./scripts/feeds
          PERL5LIB="$PWD/scripts:$PERL5LIB" ./scripts/feeds update -a
          PERL5LIB="$PWD/scripts:$PERL5LIB" ./scripts/feeds install -a

      - name: Apply Common Configurations
        run: |
          cd lede
          chmod +x ./apply-configurations.sh
          ./apply-configurations.sh

      - name: Generate Configuration File
        run: |
          cd lede
          make defconfig

      - name: Download Packages
        run: |
          cd lede
          make download -j16
          # 清理下载的包缓存
          rm -rf dl

      - name: Compile Firmware
        run: |
          cd lede
          make -j1 || make -j1 V=s
          # 清理编译中间文件
          find build_dir -type f -mmin +15 -delete
          find . -type f -name "*.o" -delete
          find . -type f -name "*.a" -delete
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare Artifacts
        run: |
          cd lede
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Upload Buildinfo
        uses: actions/upload-artifact@v4
        with:
          name: LEDE-Kwrt_buildinfo
          path: lede/artifact/buildinfo/

      - name: Upload Package
        uses: actions/upload-artifact@v4
        with:
          name: LEDE-Kwrt_package
          path: lede/artifact/package/

      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: LEDE-Kwrt_firmware
          path: lede/bin/targets/
